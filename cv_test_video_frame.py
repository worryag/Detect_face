# -*- coding: utf-8 -*-

import cv2 as cv
import logging as log
import datetime as dt
import time

# Захват первого устройства
camera0 = cv.VideoCapture(0)
# Определение модели классификатора
face = cv.CascadeClassifier('/usr/share/opencv/haarcascades/haarcascade_frontalface_default.xml')
# Инициализация журнала событий
log.basicConfig(filename='camera0.log',level=log.INFO)
detect = 0

while(True):
    # Проверка на доступность устройства
    if not camera0.isOpened():
        print("Камера не подключена.")
        time.sleep(5)
        pass

    # Захват кадр за кадром
    ret, frame = camera0.read()

    # Обработка кадра
    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)

    # Обнаруживаем лица во входном изображение и возвращаем в виде списка прямоугольников
    faces = face.detectMultiScale(
        # gray -  матрица содержащая изображение в котором обнаружены объекты.
        #
        # scaleFactor - параметр, определяющий размер изображения при каждой шкале изображения.
        #   В основном масштабный коэффициент используется для создания вашей масштабной пирамиды.
        #   Модель имеет фиксированный размер, определенный во время обучения, что видно в xml.
        #   Это означает, что этот размер лица обнаружен на изображении, если он присутствует.
        #   Однако, перемасштабируя входное изображение, вы можете изменить размер более крупного лица на меньший,
        #   сделав его детектируемым по алгоритму.
        #   1.05 - это хорошее возможное значение для этого, что означает,
        #   что вы используете небольшой шаг для изменения размера, то есть уменьшите размер на 5%,
        #   вы увеличите вероятность совпадения размера с моделью для обнаружено обнаружение.
        #   Это также означает, что алгоритм работает медленнее, поскольку он более тщателен.
        #   Вы можете увеличить его до 1,4 для более быстрого обнаружения, рискуя вообще потерять некоторые лица.
        #
        # minNeighbors - параметр, определяющий, сколько соседей должен иметь каждый прямоугольник-кандидат.
        #   Этот параметр влияет на качество обнаружения лиц.
        #   Более высокое значение приводит к меньшему количеству обнаружений, но с более высоким качеством.
        #   3~6 - хорошее значение для него.
        #
        # minSize - Минимальный возможный размер объекта. Объекты, меньше игнорируются.
        #   Этот параметр определяет, насколько малый размер вы хотите обнаружить.
        #   Обычно [30, 30] является хорошим началом для обнаружения лиц.
        gray,
        scaleFactor=1.3,
        minNeighbors=5,
        minSize=(30, 30))

    # Рисуем квадратную рамку вокруг обнаруженных лиц
    for (x, y, w, h) in faces:
            # ---параметры функции для рисования квадратной рамки
            # cv2.rectangle(img,(x1,y1),(x2,y2),(255,0,0),2)
            # img переменная изображения, в данном случаи кадра
            # x1,y1 ---------
            # |              |
            # |              |
            # |              |
            # -------------x2,y2
            # (255,0,0) цвет (B,G,R) -синий,зеленный,красный
            # крайний параметр толщина линии от 1..3
        cv.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 1)

    # Запись в журнал событий
    if detect != len(faces):
        log.info("Обнаружено : "+str(len(faces))+" Дата: "+str(dt.datetime.now()))

    # Вывод итогового кадра
    cv.imshow('camera0',frame)

    # Завершение программы по нажатию клавиши q
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# По завершению освобождение устройства и закрытие окна.
camera0.release()
cv.destroyAllWindows()